#!/usr/bin/sh
set -euf
incdir=/usr/lib/os-installer
. "${incdir}/die.inc.sh"
. "${incdir}/devices.inc.sh"

usage() {
  printf 'Usage: %s <device> [device]...\n' "${0##*/}"
  printf '%s\n' \
    '' \
    'Format the given devices as LVM physical volumes (PV) inside LUKS encryption.' \
    'A volume group (VG) named vgsys will be created from the devices if there does not already exist a VG with the same name.' \
    'Environment variables can be used to adjust the LUKS configuration:' \
    ' LUKSFORMAT_CIPHER - Cipher algorithm used. cryptsetup: --cipher' \
    ' LUKSFORMAT_CIPHER_KEYSIZE - Cipher key size, in bits. cryptsetup: --key-size' \
    ' LUKSFORMAT_LABEL - LUKS label to identify the encrypted partition. cryptsetup: --label' \
    ' LUKSFORMAT_INTEGRITY - Use AEAD authenticated encryption. cryptsetup: --integrity' \
    ' LUKSFORMAT_TPM2_DEVICE - Enroll a TPM2 hardware device for automatic unlocking. systemd-cryptenroll: --tpm2-device' \
    ' LUKSFORMAT_TPM2_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-pcrs' \
    ' LUKSFORMAT_TPM2_PUBLIC_KEY_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-public-key-pcrs' \
    ' LUKSFORMAT_FIDO2_DEVICE - Enroll a FIDO2 hardware token, e.g. Yubikey. systemd-cryptenroll: --fido2-device' \
    ' LUKSFORMAT_DETACHED_HEADER - Place the LUKS header in a separate file or device. Useful in very specific situations, not supported in this basic system setup. cryptsetup: --header'
}

if [ $# -lt 1 ]; then
  usage
  exit 2
fi

vg_name='vgsys'
label_base="${LUKSFORMAT_LABEL:-pvsys}"
var_name='var'
var_size='4G'

if vgdisplay --column "${vg_name}" 2>/dev/null; then
  die 'VG %s already exists. Refusing reinstallation.\n' "${vg_name}"
fi

system-install-add-disk "${label_base}" "$@"

# find all PVs labeled pvsys-*
# Because of nested devices (partitions and LUKS containers) we need to do some recursion to figure out which devices we want.
luks_devices=$( \
  lsblk -o 'PATH,FSTYPE,LABEL' -J -T "$@" | \
  jq -r '.blockdevices[] | recurse(.children[]?) | select( .fstype == "crypto_LUKS" and ( .label | test("^'"${label_base}"'-[0-9]+$") )) | .children[]? | .path')
[ -n "${luks_devices}" ] || die 'Failed to find any open LUKS devices matching label=%s-*\n' "${label_base}"

vgcreate --verbose \
  "${vg_name}" \
  --dataalignment=16m \
  ${luks_devices}

system-install-create-lv "${vg_name}" "${var_name}" "${var_size}" --addtag '@type:var'
roothash="$(kernel_cmdline_arg roothash)"
if [ -z "${roothash}" ]; then
  roothash="$(kernel_cmdline_arg usrhash)"
fi
install_from="$(lsblk -T -J -o 'PATH,PARTUUID' | \
  jq -r ".blockdevices[] | recurse(.children[]?) | select( .children[]?.partuuid == \"$(verity_hash_uuid_from_roothash "${roothash}")\" ) | .path" \
  )"
copy-sys-images "${install_from}" "${vg_name}"
