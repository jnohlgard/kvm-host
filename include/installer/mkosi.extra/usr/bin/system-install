#!/usr/bin/sh
set -euf

incdir=/usr/lib
. "${incdir}/lv-verity.inc.sh"

usage() {
  printf 'Usage: %s <device> [device]...\n' "${0##*/}"
  printf '%s\n' \
    '' \
    'Format the given devices as LVM physical volumes (PV) inside LUKS encryption.' \
    'A volume group (VG) named vgsys will be created from the devices if there does not already exist a VG with the same name.' \
    'Environment variables can be used to adjust the LUKS configuration:' \
    ' LUKSFORMAT_CIPHER - Cipher algorithm used. cryptsetup: --cipher' \
    ' LUKSFORMAT_CIPHER_KEYSIZE - Cipher key size, in bits. cryptsetup: --key-size' \
    ' LUKSFORMAT_LABEL - LUKS label to identify the encrypted partition. cryptsetup: --label' \
    ' LUKSFORMAT_INTEGRITY - Use AEAD authenticated encryption. cryptsetup: --integrity' \
    ' LUKSFORMAT_TPM2_DEVICE - Enroll a TPM2 hardware device for automatic unlocking. systemd-cryptenroll: --tpm2-device' \
    ' LUKSFORMAT_TPM2_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-pcrs' \
    ' LUKSFORMAT_TPM2_PUBLIC_KEY_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-public-key-pcrs' \
    ' LUKSFORMAT_FIDO2_DEVICE - Enroll a FIDO2 hardware token, e.g. Yubikey. systemd-cryptenroll: --fido2-device' \
    ' LUKSFORMAT_DETACHED_HEADER - Place the LUKS header in a separate file or device. Useful in very specific situations, not supported in this basic system setup. cryptsetup: --header'
}

if [ $# -lt 1 ]; then
  usage
  exit 2
fi

vg_name='vgsys'
label_base="${LUKSFORMAT_LABEL:-pvsys}"
var_name='var'
var_size='4G'
home_name='home'
home_size='4G'
srv_name='srv'
srv_size='1G'

if vgs -- "${vg_name}" 2>/dev/null; then
  die 'VG %s already exists. Refusing reinstallation.\n' "${vg_name}"
fi

system-install-add-disk "${label_base}" "$@"

udevadm settle -t 3 || true

systemd-tty-ask-password-agent --list

if [ -t 0 ]; then
  systemd-tty-ask-password-agent --query
fi

systemctl start luks-unlock.target

# find all PVs labeled pvsys-*
# Because of nested devices (partitions and LUKS containers) we need to do some recursion to figure out which devices we want.
luks_devices=$( \
  lsblk -o 'PATH,FSTYPE,LABEL' -J -T "$@" | \
  jq -r '.blockdevices[] | recurse(.children[]?) | select( .fstype == "crypto_LUKS" and ( .label | test("^'"${label_base}"'-[0-9]+$") )) | .children[]? | .path'
)
[ -n "${luks_devices}" ] || die 'Failed to find any open LUKS devices matching label=%s-*\n' "${label_base}"

vgcreate --verbose \
  "${vg_name}" \
  --dataalignment=16m \
  ${luks_devices}

system-install-create-lv \
  "${vg_name}" \
  "${var_name}" \
  "${var_size}" \
  --addtag '@type:var'
system-install-create-lv \
  "${vg_name}" \
  "${srv_name}" \
  "${srv_size}" \
  --addtag '@type:srv'
system-install-create-lv \
  "${vg_name}" \
  "${home_name}" \
  "${home_size}" \
  --addtag '@type:home'

# xfs protofile for /var
# 1 1
# d--755 0 0
# etc d--755 0 0
# $
# .overlay d--755 0 0
# etc d--755 0 0
# work d--755 0 0
# $
# upper d--755 0 0
# $
# $
# $
# $

install_from="/run/os-install"
esp_source="/dev/disk/by-id/efi-loader-esp"
image_source="/dev/disk/by-partlabel/sysimages"
source_mountopts="noexec,nodev,nosuid,noatime"
esp_mountopts="${source_mountopts},umask=077"
# Look for a GPT partition with the correct type UUID but fall back to the
# first partition of the first target device
esp_dev="$(lsblk -J -T -o parttype,path "$@" | jq -j \
  '[.blockdevices[]?.children[]? | select(.parttype == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b") | .path] | first' \
  || printf '%s' "${1}1" \
  )"
systemd-mount \
  -o "ro,${source_mountopts}" \
  "${image_source}" \
  "${install_from}/images"
systemd-mount \
  -t vfat \
  --owner=root \
  -o "ro,${esp_mountopts}" \
  "${esp_source}" \
  "${install_from}/efi"
copy-sys-images \
  "${install_from}/images" \
  "${vg_name}"
systemd-mount \
  -t vfat \
  --owner=root \
  -o "${esp_mountopts}" \
  "${esp_dev}" \
  /efi
/usr/lib/systemd/systemd-sysupdate \
  --verify=yes \
  --sync=yes \
  --root=/ \
  --definitions=/usr/lib/sysupdate.d/ \
  update
systemd-mount -u \
  "${install_from}/efi" \
  "${install_from}/images"

printf 'Reloading systemd units and updating verity mappings...\n'
# Using the asterisk to avoid failing if there is no service by this name, the
# generator will create it if it is missing when we call daemon-reload next.
systemctl reset-failed 'systemd-veritysetup@root.service*'
systemctl daemon-reload
systemctl start initrd-root-fs.target initrd-fs.target

user=prov
selinux_user=staff_u
selinux_root="/sysroot/etc/selinux"
homedir="/sysroot/var/home/${user}"
printf 'Creating a temporary provisioning user account "%s"\n' "${user}"
system-install-add-homed-user \
  "${user}" \
  /sysroot

if [ -e "${selinux_root}/config" ]; then
  . "${selinux_root}/config"
  if [ "${SELINUX:-disabled}" != 'disabled' ]; then
    mountpoints="$(findmnt -rRn -o target -T '/sysroot/var')"
    if [ -n "${mountpoints}" ]; then
        printf 'Applying SELinux contexts to newly created /var files\n'
        setfiles -mFv \
          -r '/sysroot' \
          -c "${selinux_root}/${SELINUXTYPE}/policy/policy.33" \
          "${selinux_root}/${SELINUXTYPE}/contexts/files/file_contexts" \
          ${mountpoints} \
          || printf 'Warning: There were some errors during SELinux relabeling.\n'
        chcon -u "${selinux_user}" -R "/sysroot/var/home/${user}.homedir"
      fi
    printf 'Unix logins to SELinux user mappings:\n'
    cat "${selinux_root}/${SELINUXTYPE}/seusers" || :
  fi
fi

printf '\nInstallation complete!\n'
