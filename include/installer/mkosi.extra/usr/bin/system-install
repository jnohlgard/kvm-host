#!/usr/bin/sh
set -euf

unshared=
if [ $# -gt 0 ] && [ "$1" = 'unshared' ]; then
  unshared="$1"; shift
fi

incdir=/usr/lib
. "${incdir}/lv-verity.inc.sh"

usage() {
  printf 'Usage: %s <device> [device]...\n' "${0##*/}"
  printf '%s\n' \
    '' \
    'Format the given devices as LVM physical volumes (PV) inside LUKS encryption.' \
    'A volume group (VG) named vgsys will be created from the devices if there does not already exist a VG with the same name.' \
    'Environment variables can be used to adjust the LUKS configuration:' \
    ' LUKSFORMAT_CIPHER - Cipher algorithm used. cryptsetup: --cipher' \
    ' LUKSFORMAT_CIPHER_KEYSIZE - Cipher key size, in bits. cryptsetup: --key-size' \
    ' LUKSFORMAT_LABEL - LUKS label to identify the encrypted partition. cryptsetup: --label' \
    ' LUKSFORMAT_INTEGRITY - Use AEAD authenticated encryption. cryptsetup: --integrity' \
    ' LUKSFORMAT_TPM2_DEVICE - Enroll a TPM2 hardware device for automatic unlocking. systemd-cryptenroll: --tpm2-device' \
    ' LUKSFORMAT_TPM2_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-pcrs' \
    ' LUKSFORMAT_TPM2_PUBLIC_KEY_PCRS - Bind the TPM2 key to the provided PCRs. systemd-cryptenroll: --tpm2-public-key-pcrs' \
    ' LUKSFORMAT_FIDO2_DEVICE - Enroll a FIDO2 hardware token, e.g. Yubikey. systemd-cryptenroll: --fido2-device' \
    ' LUKSFORMAT_DETACHED_HEADER - Place the LUKS header in a separate file or device. Useful in very specific situations, not supported in this basic system setup. cryptsetup: --header'
}

if [ $# -lt 1 ]; then
  usage
  exit 2
fi

if [ -z "${unshared}" ]; then
  printf 'Entering a private mount namespace\n'
  exec unshare --mount "$0" 'unshared' "$@"
fi

vg_name='vgsys'
label_base="${LUKSFORMAT_LABEL:-pvsys}"
var_name='var'
var_size='4G'
home_name='home'
home_size='4G'
srv_name='srv'
srv_size='1G'

if vgs -- "${vg_name}" 2>/dev/null; then
  die 'VG %s already exists. Refusing reinstallation.\n' "${vg_name}"
fi

system-install-add-disk "${label_base}" "$@"

udevadm settle -t 3 || true

systemd-tty-ask-password-agent --list

if [ -t 0 ]; then
  systemd-tty-ask-password-agent --query
fi

systemctl start luks-unlock.target

# find all PVs labeled pvsys-*
# Because of nested devices (partitions and LUKS containers) we need to do some recursion to figure out which devices we want.
luks_devices=$( \
  lsblk -o 'PATH,FSTYPE,LABEL' -J -T "$@" | \
  jq -r '.blockdevices[] | recurse(.children[]?) | select( .fstype == "crypto_LUKS" and ( .label | test("^'"${label_base}"'-[0-9]+$") )) | .children[]? | .path'
)
[ -n "${luks_devices}" ] || die 'Failed to find any open LUKS devices matching label=%s-*\n' "${label_base}"

vgcreate --verbose \
  "${vg_name}" \
  --dataalignment=16m \
  ${luks_devices}

system-install-create-lv "${vg_name}" "${var_name}" "${var_size}" --addtag '@type:var'
system-install-create-lv "${vg_name}" "${srv_name}" "${srv_size}" --addtag '@type:srv'
system-install-create-lv "${vg_name}" "${home_name}" "${home_size}" --addtag '@type:home'

install_from=/run/sysimages
mkdir -p "${install_from}"
mount -o ro "/dev/disk/by-partlabel/sysimages" "${install_from}"
copy-sys-images "${install_from}" "${vg_name}"
mount -v -o umask=077 "${1}1" /boot
/usr/lib/systemd/systemd-sysupdate \
  --verify=yes \
  --sync=yes \
  --root=/ \
  --definitions=/usr/lib/sysupdate.d/ \
  update

printf 'Reloading systemd units and updating verity mappings...\n'
systemctl reset-failed 'systemd-veritysetup@root.service*'
systemctl daemon-reload

selinux_store="/sysroot/etc/selinux"
selinux_user="sysadm_u"
user=prov
printf 'Creating a temporary provisioning user account "%s"\n' "${user}"
system-install-add-homed-user "${user}" /sysroot

if [ -e "${selinux_store}/config" ]; then
  mountpoints="$(findmnt -rRn -o target -T '/sysroot/var')"

  semanage login -S "${selinux_store}" -a -s "${selinux_user}" "${user}"

  if [ -n "${mountpoints}" ]; then
    . "${selinux_store}/config"
    if [ "${SELINUX:-disabled}" != 'disabled' ]; then
      printf 'Applying SELinux contexts to newly created /var files\n'
      setfiles -mFv \
        -r '/sysroot' \
        -c "${selinux_store}/${SELINUXTYPE}/policy/policy.33" \
        "${selinux_store}/${SELINUXTYPE}/contexts/files/file_contexts" \
        ${mountpoints} \
        || printf 'Warning: There were some errors during SELinux relabeling.\n'
    fi
  fi
  printf 'Unix logins to SELinux user mappings:\n'
  semanage login -S "${selinux_store}" -l
fi

printf '\nInstallation complete!\n'
